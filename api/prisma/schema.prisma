generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String      @unique
  password      String?     // Rendu optionnel pour Google Auth
  googleId      String?     @unique
  facebookId    String?     @unique
  picture       String?
  gender        String     // Pour stats
  birthDate     DateTime   // Pour stats
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  games         Game[]
  tickets       Ticket[]
  isAdmin       Boolean     @default(false)
  isEmploye     Boolean     @default(false)
  resetTokens   ResetToken[]
}

// Table Jeux Concours (définition générale)
model Game {
  id            Int         @id @default(autoincrement())
  description   String?     // desc du jeux
  ticketId      Int
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Table Session du Jeu Concours (instance temporelle)
model Session {
  id            Int         @id @default(autoincrement())
  name          String
  startDate     DateTime    // Ex. 2025-03-01
  endDate       DateTime    // Ex. 2025-03-30
  claimEndDate  DateTime    // Ex. 2025-04-29 (30 jours après fin)
  tickets       Ticket[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Table Ticket
model Ticket {
  id                Int      @id @default(autoincrement())
  code              String   @unique
  used              Boolean  @default(false)
  totalQuantityGain Int      @default(1)
  isDelivered       Boolean  @default(false)
  deliveredAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  gain              Gain     @relation(fields: [gainId], references: [id])
  gainId            Int
  session           Session  @relation(fields: [sessionId], references: [id])
  sessionId         Int
  user              User?    @relation(fields: [userId], references: [id])
  userId            Int?
  games             Game[]
}

// Table Gain (lots)
model Gain {
  id            Int         @id @default(autoincrement())
  name          String      // Ex. "Infuseur à thé"
  value         Float       // Ex. 0, 39, 69
  probability   Int         // Ex. 0, 100, 80
  tickets       Ticket[]
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}