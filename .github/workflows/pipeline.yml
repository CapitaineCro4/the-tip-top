name: CI/CD Pipeline with Backup and Deploy

on:
  push:
    branches:
      - develop
      - preprod
      - main
  pull_request:
    branches:
      - develop
      - preprod
      - main
  schedule:
    - cron: "0 0 * * 0" # Backup hebdomadaire le dimanche à minuit UTC
  workflow_dispatch: # Déclenchement manuel

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: "20"
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  VPS_HOST: "46.202.132.119"
  VPS_USER: "root"
  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}

jobs:
  # Job 1 : Build (Construction des applications Front et API)
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Front
      - name: Setup Node.js for Front
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: front/yarn.lock

      - name: Install and Build Front
        working-directory: ./front
        run: |
          yarn install --frozen-lockfile
          yarn build

      # Build API
      - name: Setup Node.js for API
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: api/yarn.lock

      - name: Install and Build API
        working-directory: ./api
        run: |
          yarn install --frozen-lockfile
          yarn build

      # Sauvegarde des artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            front/.next/
            api/dist/
          retention-days: 1

  # Job 2 : Test (Tests unitaires et qualité de code)
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      # Tests Front
      - name: Setup Node.js for Front Tests
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: front/yarn.lock

      - name: Run Front Tests
        working-directory: ./front
        run: |
          yarn install --frozen-lockfile
          yarn test --coverage
        env:
          NODE_ENV: test

      # Tests API
      - name: Setup Node.js for API Tests
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: api/yarn.lock

      - name: Run API Tests
        working-directory: ./api
        run: |
          yarn install --frozen-lockfile
          yarn test:e2e
        env:
          NODE_ENV: test

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            front/coverage/
            api/coverage/

  # Job 3 : Docker (Construction et push des images Docker vers Docker Hub)
  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Debug Artifact Structure
        run: |
          ls -R artifacts || echo "Artifacts directory is empty"

      - name: Restore Artifacts
        run: |
          mkdir -p front/.next api/dist
          cp -r artifacts/front/.next/* front/.next/ || echo "No files in artifacts/front/.next"
          cp -r artifacts/api/dist/* api/dist/ || echo "No files in artifacts/api/dist"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/the-tip-top-api:latest ./api
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/the-tip-top-front:latest ./front
          docker push ${{ env.DOCKERHUB_USERNAME }}/the-tip-top-api:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/the-tip-top-front:latest

  # Job 4 : Deploy Dev (Déploiement sur develop)
  deploy-dev:
    needs: docker
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Restore Artifacts
        run: |
          mkdir -p front/.next api/dist
          cp -r artifacts/front/.next/* front/.next/ || echo "No files in artifacts/front/.next"
          cp -r artifacts/api/dist/* api/dist/ || echo "No files in artifacts/api/dist"

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to Dev
        run: |
          sshpass -p "$VPS_PASSWORD" scp -r -o StrictHostKeyChecking=no ./* $VPS_USER@$VPS_HOST:/root/the-tip-top/
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd /root/the-tip-top
            docker-compose down
            docker-compose up --build -d
          EOF

  # Job 5 : Deploy Preprod (Déploiement sur preprod)
  deploy-preprod:
    needs: docker
    if: github.ref == 'refs/heads/preprod'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Restore Artifacts
        run: |
          mkdir -p front/.next api/dist
          cp -r artifacts/front/.next/* front/.next/ || echo "No files in artifacts/front/.next"
          cp -r artifacts/api/dist/* api/dist/ || echo "No files in artifacts/api/dist"

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to Preprod
        run: |
          sshpass -p "$VPS_PASSWORD" scp -r -o StrictHostKeyChecking=no ./* $VPS_USER@$VPS_HOST:/root/the-tip-top/
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd /root/the-tip-top
            docker-compose down
            docker-compose up --build -d
          EOF

  # Job 6 : Deploy Production (Déploiement sur main avec approbation)
  deploy-prod:
    needs: docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://dsp5-archi-f24a-15m-g4.fr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Restore Artifacts
        run: |
          mkdir -p front/.next api/dist
          cp -r artifacts/front/.next/* front/.next/ || echo "No files in artifacts/front/.next"
          cp -r artifacts/api/dist/* api/dist/ || echo "No files in artifacts/api/dist"

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Request Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: CapitaineCro4
          minimum-approvals: 1

      - name: Deploy to Production
        run: |
          sshpass -p "$VPS_PASSWORD" scp -r -o StrictHostKeyChecking=no ./* $VPS_USER@$VPS_HOST:/root/the-tip-top/
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd /root/the-tip-top
            echo "API_PORT=3002" > .env
            echo "DATABASE_URL=postgresql://admin:admin@postgres_db:5432/mydatabase?schema=public" >> .env
            echo "JWT_SECRET=secret" >> .env
            echo "FRONT_PORT=3000" >> .env
            echo "NEXT_PUBLIC_API_URL=https://dsp5-archi-f24a-15m-g4.fr/back/api" >> .env
            docker-compose down
            docker-compose up --build -d
          EOF

  # Job 7 : Backup (Sauvegarde automatique de la base de données)
  backup:
    needs: docker
    runs-on: ubuntu-latest
    environment:
      name: backup
      url: https://drive.google.com/drive/folders/1YOHfU8s4J2wy5Wl1-d_jYY9wZs_-eqoO
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Backup PostgreSQL Database
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            docker exec postgres_db pg_dump -U admin -d mydatabase > /tmp/db_backup.sql
            exit
          EOF
          sshpass -p "$VPS_PASSWORD" scp -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST:/tmp/db_backup.sql ./db_backup.sql

      - name: Create Backup Archive
        id: create_backup
        run: |
          BACKUP_NAME="db-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
          tar -czf "$BACKUP_NAME" db_backup.sql
          echo "backup_name=$BACKUP_NAME" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Google Drive API
        run: pip install google-auth-httplib2 google-auth-oauthlib google-api-python-client

      - name: Upload to Google Drive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          FOLDER_ID: "1YOHfU8s4J2wy5Wl1-d_jYY9wZs_-eqoO"
          BACKUP_NAME: ${{ steps.create_backup.outputs.backup_name }}
        run: |
          echo "$GOOGLE_CREDENTIALS" > credentials.json
          python -c '
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          creds = Credentials.from_service_account_file("credentials.json")
          service = build("drive", "v3", credentials=creds)
          file_metadata = {"name": "${{ env.BACKUP_NAME }}", "parents": ["${{ env.FOLDER_ID }}"]}
          media = MediaFileUpload("${{ env.BACKUP_NAME }}")
          service.files().create(body=file_metadata, media_body=media, fields="id").execute()
          '

      - name: Clean Up
        if: always()
        run: |
          rm -f db_backup.sql "$BACKUP_NAME" credentials.json

  # Job 8 : Restore (Redéploiement automatique)
  restore:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Restore Artifacts
        run: |
          mkdir -p front/.next api/dist
          cp -r artifacts/front/.next/* front/.next/ || echo "No files in artifacts/front/.next"
          cp -r artifacts/api/dist/* api/dist/ || echo "No files in artifacts/api/dist"

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Google Drive API
        run: pip install google-auth-httplib2 google-auth-oauthlib google-api-python-client

      - name: Download Latest Backup from Google Drive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          FOLDER_ID: "1YOHfU8s4J2wy5Wl1-d_jYY9wZs_-eqoO"
        run: |
          echo "$GOOGLE_CREDENTIALS" > credentials.json
          python -c '
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          import io
          from googleapiclient.http import MediaIoBaseDownload

          creds = Credentials.from_service_account_file("credentials.json")
          service = build("drive", "v3", credentials=creds)
          results = service.files().list(
              q="'\''${{ env.FOLDER_ID }}'\'' in parents",
              orderBy="createdTime desc",
              pageSize=1,
              fields="files(id, name)"
          ).execute()
          files = results.get("files", [])
          if not files:
              raise Exception("Aucune sauvegarde trouvée dans Google Drive")
          file_id = files[0]["id"]
          file_name = files[0]["name"]
          print(f"Téléchargement de {file_name} (ID: {file_id})")
          
          request = service.files().get_media(fileId=file_id)
          fh = io.FileIO(file_name, "wb")
          downloader = MediaIoBaseDownload(fh, request)
          done = False
          while not done:
              status, done = downloader.next_chunk()
              print(f"Progression : {int(status.progress() * 100)}%")
          ' > download_log.txt
          BACKUP_NAME=$(ls db-backup-*.tar.gz | head -n 1)
          echo "backup_name=$BACKUP_NAME" >> $GITHUB_OUTPUT
        id: download_backup

      - name: Extract Backup
        run: |
          tar -xzf "${{ steps.download_backup.outputs.backup_name }}"
          ls -l db_backup.sql

      - name: Restore Database and Redeploy
        run: |
          sshpass -p "$VPS_PASSWORD" scp -r -o StrictHostKeyChecking=no ./* $VPS_USER@$VPS_HOST:/root/the-tip-top/
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd /root/the-tip-top
            docker exec -i postgres_db psql -U admin -d mydatabase < db_backup.sql
            docker-compose down
            docker-compose up --build -d
            echo "Redéploiement terminé !"
          EOF

      - name: Clean Up
        if: always()
        run: |
          rm -f db_backup.sql "${{ steps.download_backup.outputs.backup_name }}" credentials.json